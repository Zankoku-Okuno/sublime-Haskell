%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: Haskell
file_extensions:
  - hs
scope: source.haskell
contexts:
  main:
    - match: "(`)(?:[A-Z][[:alnum:]_]*\\.)*[[:alpha:]_][[:alnum:]_']*?(`)"
      comment: "In case this regex seems unusual for an infix operator, note that Haskell allows any ordinary function application (elem 4 [1..10]) to be rewritten as an infix expression (4 `elem` [1..10])."
      scope: keyword.operator.function.infix.haskell
      captures:
        1: punctuation.definition.entity.haskell
        2: punctuation.definition.entity.haskell
    - match: \b(module)\b
      captures:
        1: keyword.other.haskell
      push:
        - meta_scope: meta.declaration.module.haskell
        - match: (where)
          captures:
            1: keyword.other.haskell
          pop: true
        - include: module_name
        - include: module_exports
        - match: "[a-z_]+"
          scope: invalid
    - match: \b(class)\b
      captures:
        1: keyword.other.haskell
      push:
        - meta_scope: meta.declaration.class.haskell
        - match: \b(where)\b
          captures:
            1: keyword.other.haskell
          pop: true
        - match: '[A-Z][[:alnum:]_'']*'
          scope: entity.other.inherited-class.haskell
        - match: '\b[a-z_][[:alnum:]_'']*\b'
          scope: variable.other.generic-type.haskell
    - match: \b(instance)\b
      captures:
        1: keyword.other.haskell
      push:
        - meta_scope: meta.declaration.instance.haskell
        - match: \b(where)\b|$
          captures:
            1: keyword.other.haskell
          pop: true
        - include: type_signature
    - match: \b(import)\b
      captures:
        1: keyword.other.haskell
      push:
        - meta_scope: meta.import.haskell
        - match: ($|;)
          pop: true
        - match: (qualified|as|hiding)
          scope: keyword.other.haskell
        - include: module_name
        - include: module_exports
        - include: comments
    - match: '\b(deriving)(?:\s+(stock|newtype|anyclass))?\b'
      captures:
        1: keyword.other.haskell
        2: keyword.other.haskell
      push:
        - meta_scope: meta.deriving.haskell
        - match: '\b(via)\b'
          # FIXME should this set a new scope?
          # if so, what grammatical categories should go here?
          captures:
            1: keyword.other.haskell
        - match: '\b[A-Z][[:alnum:]_'']*'
          scope: entity.other.inherited-class.haskell
        - match: '\('
          push:
            - meta_scope: meta.deriving.list.haskell
            - match: '\b[A-Z][[:alnum:]_'']*'
              scope: entity.other.inherited-class.haskell
            - match: '\)'
              pop: true
            - include: comments
        - match: "$"
          pop: true
        - include: comments
    - match: \b(deriving|where|data|type|case|of|let|in|newtype|default)\b
      scope: keyword.other.haskell
    - match: '\binfix[lr]?\b'
      scope: keyword.operator.haskell
    - match: \b(do|if|then|else)\b
      scope: keyword.control.haskell
    - match: \b(mdo|rec)\b
      scope: keyword.control.haskell
    - match: '\b([0-9]+\.[0-9]+([eE][+-]?[0-9]+)?|[0-9]+[eE][+-]?[0-9]+)\b'
      comment: Floats are always decimal
      scope: constant.numeric.float.haskell
    - match: '\b([0-9]+|0([xX][0-9a-fA-F]+|[oO][0-7]+))\b'
      scope: constant.numeric.haskell
    - match: ^\s*(#)\s*\w+
      comment: In addition to Haskell's "native" syntax, GHC permits the C preprocessor to be run on a source file.
      scope: meta.preprocessor.c
      captures:
        1: punctuation.definition.preprocessor.c
    - include: pragma
    - match: '"'
      scope: punctuation.definition.string.begin.haskell
      push:
        - meta_scope: string.quoted.double.haskell
        - match: '\\$'
          scope: constant.character.escape.linebreak.haskell
          push:
            - match: ^\s*\\
              scope: constant.character.escape.linebreak.haskell
              pop: true
            - match: ^\s*.?
              scope: invalid.illegal.linebreak-in-string.haskell
              pop: true
        - match: '"'
          scope: punctuation.definition.string.end.haskell
          pop: true
        - match: '\n'
          scope: invalid.illegal.unterminated-string.haskell
          pop: true
        - match: '\\(NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|[abfnrtv\\\"''\&])'
          scope: constant.character.escape.haskell
        - match: '\\o[0-7]+|\\x[0-9A-Fa-f]+|\\[0-9]+'
          scope: constant.character.escape.octal.haskell
        - match: '\^[A-Z@\[\]\\\^_]'
          scope: constant.character.escape.control.haskell
    - match: '\[(?:|e|d|t|p)\|'
      comment: Points out splices in ast quotes
      scope: keyword.other.quasibracket.haskell
      push:
        - meta_scope: meta.other.quasiquote.haskell
        - match: '(.*)(\|\])'
          captures:
            1: string.quasiquoted.haskell
            2: keyword.other.quasibracket.haskell
          pop: true
        - match: \$\(
          scope: keyword.other.splice.haskell
        - match: \$
          scope: string.quasiquoted.haskell
        - match: "[^$]*"
          scope: string.quasiquoted.haskell
    - match: \$\(
      comment: Highlight the beginning of a splice.
      scope: keyword.other.splice.haskell
    - match: '\[(?:(?:[A-Z][[:alnum:]_]*\.)*[a-z_][[:alnum:]_'']*)?\|'
      scope: keyword.other.quasibracket.haskell
      push:
        - meta_scope: meta.other.quasiquote.haskell
        - match: '(.*)(\|\])'
          captures:
            1: string.quasiquoted.haskell
            2: keyword.other.quasibracket.haskell
          pop: true
        - match: .*
          scope: string.quasiquoted.haskell
    - match: |-
        (?x)
        (')
        (?:
          [\ -\[\]-~]                             # Basic Char
          | (\\(?:NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE
            |DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS
            |US|SP|DEL|[abfnrtv\\\"'\&]))       # Escapes
          | (\\o[0-7]+)                             # Octal Escapes
          | (\\x[0-9A-Fa-f]+)                       # Hexadecimal Escapes
          | (\^[A-Z@\[\]\\\^_])                     # Control Chars
        )
        (')
      scope: string.quoted.single.haskell
      captures:
        1: punctuation.definition.string.begin.haskell
        2: constant.character.escape.haskell
        3: constant.character.escape.octal.haskell
        4: constant.character.escape.hexadecimal.haskell
        5: constant.character.escape.control.haskell
        6: punctuation.definition.string.end.haskell
    - match: '^\s*([a-z_][[:alnum:]_'']*|\([|!%$+\-.,=</>]+\))\s*(::|∷)'
      captures:
        1: entity.name.function.haskell
        2: keyword.other.double-colon.haskell
      push:
        - meta_scope: meta.function.type-declaration.haskell
        - match: |-
            (?x)(?=
                ^(data|newtype|type|class|deriving)\s  # When a top level declaration starts
              | ^[^=]*(=)[\s[:alpha:]_0-9\(]           # A function definition
              | ^[^:∷]*(::|∷)[\s[:alpha:]_0-9\(]                        # A type declaration
            )
          pop: true
        - include: type_signature
    - match: '\b[A-Z][[:alnum:]_]*(?=\.)'
      scope: support.other.module.haskell
    - match: '\b[A-Z][[:alnum:]_'']*(?!\.)'
      scope: constant.other.haskell
    - include: comments
    - include: infix_op
    - match: '[|!@%$?~+:\-.=</>\\]+'
      comment: In case this regex seems overly general, note that Haskell permits the definition of new operators which can be nearly any string of punctuation characters, such as $%^&*.
      scope: keyword.operator.haskell
    - match: ","
      scope: punctuation.separator.comma.haskell
  block_comment:
    - match: '\{-(?!#)'
      scope: punctuation.definition.comment.begin.haskell
      push:
        - meta_scope: comment.block.haskell
        - match: '\{-#'
          push:
            - match: '-\}'
              pop: true
            - include: block_comment
        - include: block_comment
        - match: '-\}'
          scope: punctuation.definition.comment.end.haskell
          pop: true
  comments:
    - match: '--\^'
      scope: invalid.illegal.docstring-as-operator.haskell
    - match: '--\s*(\||\^)'
      captures:
        1: keyword.other.haskell
      comment: |
        I'm not sure why I have to push just the meta scope first, only to pop it
        immediately after the next contexts return, but hey, at least it works...?
      push:
        - - meta_scope: comment.line.documentation.haskell
          - match: (?=.?)
            pop: true
        - - match: '^\s*--'
            push: line_comment_body
          # TODO what exactly _are_ the rules for when a haddock comment stops?
          - match: ^\s*$
            comment: blank lines do not stop the documentation
          - match: (?=^.?)
            comment: exit as soon as a non-comment line is seen
            pop: true
        - line_comment_body
    - match: '--'
      scope: punctuation.definition.comment.haskell
      push: line_comment_body
    # FIXME block comment documentation
    - include: block_comment
  line_comment_body:
    - meta_scope: comment.line.double-dash.haskell
    - match: $\n?
      pop: true
  infix_op:
    - match: '\([-+*/,|!@$%?:.=<>]+\)'
      scope: entity.name.function.infix.haskell
  module_exports:
    - match: \(
      push:
        - meta_scope: meta.declaration.exports.haskell
        - match: \)
          pop: true
        - match: '\b[a-z_][[:alnum:]_'']*'
          scope: entity.name.function.haskell
        - match: '\b[A-Z][[:alnum:]_'']*'
          scope: storage.type.haskell
        - match: ","
          scope: punctuation.separator.comma.haskell
        - match: \((\.\.)\)
          captures:
            1: keyword.other.haskell
        - include: infix_op
        - match: \(
          push:
            - match: '\b[a-z_][[:alnum:]_'']*\b'
              scope: entity.name.function.haskell
            - match: '\b[A-Z][[:alnum:]_'']*\b'
              scope: entity.name.constant.haskell
            - match: \)
              pop: true
        - match: '^\s*--\s*(\*\*?(?!\*))\s*(.*?)\s*$'
          captures:
            1: keyword.other.haskell
            2: entity.name.section.haskell
          scope: comment.line.documentation.haskell
        - include: comments
  module_name:
    - match: "[A-Z][[:alnum:]_']*"
      scope: support.other.module.haskell
  pragma:
    - match: '\{-#(?:\s*(?i:(LANGUAGE|OPTIONS_GHC|INCLUDE|WARNING|DEPRECATED|MINIMAL|UNPACK|NOUNPACK|SOURCE|OVERLAPPING|OVERLAPPABLE|OVERLAPS|INCOHERENT|INLINE|NOINLINE|INLINABLE|CONLIKE|LINE|RULES|SPECIALIZE|SPECIALISE))\b)'
      # https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#pragmas
      captures:
        1: keyword.other.preprocessor.haskell
      push:
        - meta_scope: meta.preprocessor.haskell
        - match: '#-\}'
          pop: true
  type_signature:
    - include: pragma
    - match: forall|∀
      scope: keyword.other.forall.haskell
      push:
        - match: '\b[a-z_][[:alnum:]_'']*\b'
          scope: variable.other.generic-type.haskell
        - match: '\b[A-Z][[:alnum:]_'']\b'
          scope: invalid.illegal.non-variable-in-forall.haskell
        - match: ','
          scope: invalid.illegal.comma-in-forall.haskell
        - match: \.
          scope: keyword.other.forall.haskell
          pop: true
    - match: "(->|→)"
      scope: keyword.other.arrow.haskell
    - match: "(=>|⇒)"
      scope: keyword.other.big-arrow.haskell
    - match: '\b[a-z_][[:alnum:]_'']*\b'
      scope: variable.other.generic-type.haskell
    - match: '\b[A-Z][[:alnum:]_'']*\b'
      scope: storage.type.haskell
    - match: \(\)
      scope: storage.type.haskell
    - include: comments
